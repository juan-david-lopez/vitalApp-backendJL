name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
      - name: Check for vulnerabilities
        run: npm audit --audit-level=moderate

  test:
    needs: code-quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: vitalapp
          POSTGRES_USER: vitalapp_user
          POSTGRES_PASSWORD: secure_password_here
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run tests with coverage
        run: npm run test:coverage
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      - name: Install production dependencies
        run: npm ci --production
      - name: Create build artifact
        run: |
          tar -czf build.tar.gz server.js package*.json node_modules scripts
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: vitalapp-build
          path: build.tar.gz
          retention-days: 5

  docker:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:${{ github.ref == 'refs/heads/main' && 'latest' || 'develop' }}

  deploy-staging:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.vitalapp.com
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Aquí irían los comandos de deploy a staging
      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Aquí irían los smoke tests

  deploy-production:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://vitalapp.com
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Aquí irían los comandos de deploy a producción
      - name: Run health checks
        run: |
          echo "Running health checks..."
          # Aquí irían los health checks
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ github.run_number }} \
            --title "Release v${{ github.run_number }}" \
            --notes "Release v${{ github.run_number }}" \
            --target ${{ github.sha }}